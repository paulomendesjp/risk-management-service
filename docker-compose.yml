version: '3.8'

services:
  # ================== Infrastructure Services ==================

  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: risk-management-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: risk_management
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - risk-management-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: risk-management-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - risk-management-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: risk-management-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - risk-management-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 20s

  # ================== Microservices ==================

  # User Management Service
  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: user-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_DATABASE: risk_management
      MONGODB_USERNAME: admin
      MONGODB_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: mySecretKey123456789012345678901234567890
      JWT_EXPIRATION: 86400000
      ARCHITECT_BRIDGE_ENDPOINT: http://architect-bridge:8090
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - risk-management-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Risk Monitoring Service
  risk-monitoring-service:
    build:
      context: .
      dockerfile: ./risk-monitoring-service/Dockerfile
    container_name: risk-monitoring-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_DATABASE: risk_management
      MONGODB_USERNAME: admin
      MONGODB_PASSWORD: password123
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSITION_SERVICE_URL: http://position-service:8080
      NOTIFICATION_SERVICE_URL: http://notification-service:8080
    ports:
      - "8082:8083"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - risk-management-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Position Management Service
  position-service:
    build:
      context: .
      dockerfile: ./position-service/Dockerfile
    container_name: position-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_DATABASE: risk_management
      MONGODB_USERNAME: admin
      MONGODB_PASSWORD: password123
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RISK_MONITORING_SERVICE_URL: http://risk-monitoring-service:8080
      NOTIFICATION_SERVICE_URL: http://notification-service:8080
    ports:
      - "8083:8082"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - risk-management-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    container_name: notification-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_DATABASE: risk_management
      MONGODB_USERNAME: admin
      MONGODB_PASSWORD: password123
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Email settings (update with real SMTP server)
      MAIL_HOST: smtp.gmail.com
      MAIL_PORT: 587
      MAIL_USERNAME: your-email@gmail.com
      MAIL_PASSWORD: your-password
      # Slack settings (update with real webhook)
      SLACK_WEBHOOK_URL: https://hooks.slack.com/services/YOUR/WEBHOOK/URL
    ports:
      - "8084:8084"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - risk-management-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    # Architect Bridge Service - Python WebSocket Bridge
  architect-bridge:
    build:
      context: ./architect-bridge
      dockerfile: Dockerfile
    container_name: architect-bridge
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      # Java Risk Service connection (update when running locally)
      JAVA_WEBSOCKET_URL: ws://host.docker.internal:8083/python-bridge
      # Logging configuration
      LOG_LEVEL: INFO
    ports:
      - "8090:8090"
    networks:
      - risk-management-network
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Para conectar com servi√ßos Java locais
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  # ================== Monitoring (Optional) ==================

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - risk-management-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - risk-management-network
    profiles:
      - monitoring

# ================== Volumes ==================
volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ================== Networks ==================
networks:
  risk-management-network:
    driver: bridge
