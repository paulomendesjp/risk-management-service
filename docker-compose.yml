version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: risk-management-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: risk_management
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - risk-management-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: risk-management-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - risk-management-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: risk-management-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - risk-management-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Architect Bridge Service - Python WebSocket Bridge
  architect-bridge:
    build:
      context: ./architect-bridge
      dockerfile: Dockerfile
    container_name: architect-bridge
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      # Java Risk Service connection (update when running locally)
      JAVA_WEBSOCKET_URL: ws://host.docker.internal:8083/python-bridge
      # Logging configuration
      LOG_LEVEL: INFO
    ports:
      - "8090:8090"
    networks:
      - risk-management-network
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Para conectar com servi√ßos Java locais
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  risk-management-network:
    driver: bridge